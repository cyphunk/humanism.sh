#!/usr/bin/env bash
# common debug interface

# Get usage_self()
# handle cases where user has linked script into their bin
if ! type usage_self >/dev/null 2>&1 ; then
    if readlink $0 >/dev/null 2>&1 ; then
        source $(dirname $(readlink $0))/humanism.sh usage_self
    else
        source $(dirname $0)/humanism.sh usage_self
    fi
fi

case "$1" in
  trace)
  # Run amd trace cmd or attach to running PID or command name supplied as argument

    if [ $(echo "$2" | grep -c '^[0-9]\+$') != 0 ]; then
    # attach by PID
        echo "attaching to PID $2"
        if command -v strace >/dev/null 2>&1; then
            strace -fy -p $2
        elif command -v dtruss >/dev/null 2>&1; then
            dtruss -f -p $2
        fi
    elif /usr/bin/env ps -a -x | grep -v grep | grep -v -w dbg | grep -w "${@:2}" >/dev/null 2>&1; then
    # attach by name
        echo "attaching to proc name ${@:2}"
        /usr/bin/env ps -a -x | grep -v grep | grep -v -w dbg | grep -w "${@:2}"
        if command -v strace >/dev/null 2>&1; then
            CMDPID=$(/usr/bin/env ps -a -x -o pid,command | grep -v grep | grep -v -w dbg | grep -w "${@:2}" | head -1 | awk '{print $1}' )
            echo "tracing $CMDPID"
    	    strace -fy -p "$CMDPID"
        elif command -v dtruss >/dev/null 2>&1; then
            dtruss -f -n "${@:2}"
        fi
    else
    # call command
        echo "calling ${@:2}"
        if command -v strace >/dev/null 2>&1; then
            strace -fy "${@:2}"
        elif command -v dtruss >/dev/null 2>&1; then
            dtruss -f "${@:2}"
        fi
    fi
	#fF child procs, y resolve file descriptors
	;;
  openfiles)
  # Show open files of an already running processes and its children, by name
    if [ -e "$2" ]; then
        # is directory,file or device
        lsof +d "$2"
        #fuser -vm "$2"
    else
	    lsof -p $(ps -C $2 -o pid | grep -v PID | xargs | sed "s/ /,/g")
    fi
	;;
  fileprocs)
  # Show pid's touching file
	lsof $2
	;;
  libtree)
  # using strings alone give .so dependency for file
  # use: dbg libtree <TARGET> [ignorelibs]
  # ie:  dbg libtree <TARGET> [ld.so.1 libc.so libpthread.so.0 libc.so.6]


    echo "will not resolve dynamically loaded libs (libdl)" >&2
    ALL=""
    TARGET="$2" # first arg
    #TARGET="${@:$#}" # last arg
    IGNORE="${@:3}" # all but first
    #IGNORE="${@:1:$(($#-1))}" # all but last
    # ALL holds found libs to avoid duplicate searching
    # ALL="$IGNORE"
    showlibs () {
        local COMMON_IGNORE="ld.so libc.so libpthread.so libc.so ld-linux.so"
        local DEPTH="$1"
        local FILE="$2"
        if [[ "$FILE" == "" ]]; then return; fi
        local FILEBASE=$(basename $FILE 2>/dev/null)

        # if FILE already checked, skip
        if echo "$ALL" | grep "$FILEBASE" &>/dev/null; then
            #printf "%${DEPTH}s   have\n";
            return 0;
        fi
        # if FILE in ignore list, skip
        if echo "$IGNORE" | grep "$FILEBASE" &>/dev/null; then return; fi

        ALL="$ALL $FILEBASE"

        # does target file provide more libary stringss: \S+.so.*
        # NOT SURE IF THIS IS THE BEST PLACE TO HANDLE SYMLINKS BUT...
        test ! -e "$FILE" && FILE=$(/usr/bin/env find $ROOTPATH -name $(basename $(readlink $FILE) ) )
        local LIBS=$(strings "$FILE" | egrep '^[^ ]+\.so[^a-zA-Z0-9\. ]*' | grep -v ' ' | sed 's%/usr/lib/%%g' | sed 's%/lib/%%g' | sort -u)
        for lib in $LIBS; do
            if [[ "$lib" == "" ]]; then continue; fi
            if [[ "$lib" == "$FILEBASE" ]]; then continue; fi
            if echo "$lib" | grep ' ' &>/dev/null; then continue; fi

            local base=$(basename "$lib" 2>/dev/null)
            if [[ "$base" != "" ]]; then
                f=$(/usr/bin/env find $ROOTPATH -name "$base")
                printf "%${DEPTH}s$base\n" #|tr " " "#"
                showlibs $(($DEPTH+4)) $f
            fi
        done
    }
    showlibs 0 "$TARGET"
    ;;
  canexe)
  # pick an executable and it's dependencies.
  # e.g. grab arm executables from one firmware and use on another
  #
  # tries to determine libs with ldd first, then dbg libtree
  #
  # use: dbg canexe <TARGET> [ignorelibs]
  # ie:  dbg <TARGET> [ld.so.1 libc.so libpthread.so.0 libc.so.6]
    TARGET="$2" # first arg
    test ! -e "$TARGET" && echo cant access file && exit
    IGNORE="${@:3}" # all but first
    NAME=$(basename "$TARGET")
    mkdir $NAME
    liblist=$(ldd "$TARGET")
    if [ $? = 0 ]; then
      echo "canning from local system (ldd returned results)" >&2
      # store system information for posterity
      (uname -a; cat /etc/issue; ldd --version|head -2) > $NAME/info.txt
      # skip those user requested be excluded
      exclude=$(echo "$IGNORE" | tr ' ' '|')
      test -n "$exclude" && \
        liblist=$(echo "$liblist" | egrep -v "$exclude" )
      # skip virtual libs (linux-vdso.so.1) that have no file location
      liblist=$(echo "$liblist" | grep  '/')
      # get paths
      liblist=$(echo "$liblist" | sed -e "s%^[^/]*\(/[^ ]*\).*$%\1%")
    else
      echo "canning from local directory (ldd returned no results)" >&2
      liblist=$($0 libtree "$TARGET" $IGNORE | tr -d ' ' | sort |uniq)
      # get paths
      liblist=$(for f in $liblist; do find ./ -name $f; done)
      # dead with broken symlinks (common when canning from firmware image)
      liblist=$(for f in $liblist; do find ./ -name $(basename $(readlink $f)); done )
    fi
    echo -e "LIBRARIES:\n$liblist"
    cp --dereference $TARGET $liblist $NAME/.
    echo "#!/bin/sh"                                               > $NAME/run.sh
    echo "cwd=\$(dirname \$0)"                                    >> $NAME/run.sh
    echo "LD_LIBRARY_PATH=\$cwd \$cwd/$NAME $* || \\"             >> $NAME/run.sh
    echo "/lib/ld-linux*.so* --library-path \$cwd \$cwd/$NAME $*" >> $NAME/run.sh
    chmod 755 $NAME/run.sh
    tar -cvf $NAME.tar $NAME/ && ls $NAME.tar
    rm -rf $NAME/
    ;;
  demanglecpp)
  # pipe strings into c++filt to demangle names
    strings $2 | c++filt
    ;;
  *)
	usage_self
	;;
esac

exit 0
